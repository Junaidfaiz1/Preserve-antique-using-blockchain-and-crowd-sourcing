{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\her73\\\\Downloads\\\\Project\\\\CLIENT\\\\src\\\\context\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst metmaskContext = /*#__PURE__*/createContext();\nexport const MetmaskContextProvider = ({\n  children\n}) => {\n  _s();\n  const [accounts, setAccounts] = useState(\"\");\n  const connectAccount = async () => {\n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n      try {\n        console.log(\"Ethereum successfully detected!\");\n        await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        const accounts = await provider.request({\n          method: \"eth_accounts\"\n        });\n        console.log(\"Connected account:\", accounts[0]);\n      } catch {\n        console.error(\"User is not allowed\");\n      }\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else if (!process.env.production) {\n      provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\n    }\n    console.log(\"provider\", provider);\n    if (provider) {\n      const accounts = await provider.request({\n        method: \"eth_accounts\"\n      });\n      setAccounts(accounts[0]);\n    }\n    return provider;\n  };\n  useEffect(() => {\n    if (window.ethereum) {\n      connectAccount();\n    }\n    // eslint-disable-next-line\n  }, [window.ethereum]);\n  window.ethereum.on(\"accountsChanged\", accounts => {\n    setAccounts(accounts[0] ? accounts[0] : \"\");\n  });\n  return /*#__PURE__*/_jsxDEV(metmaskContext.Provider, {\n    value: {\n      connectAccount,\n      accounts\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MetmaskContextProvider, \"IMqEv5g/X3beAeVacG91s+NqMlQ=\");\n_c = MetmaskContextProvider;\nexport default metmaskContext;\nvar _c;\n$RefreshReg$(_c, \"MetmaskContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","Web3","jsxDEV","_jsxDEV","metmaskContext","MetmaskContextProvider","children","_s","accounts","setAccounts","connectAccount","provider","window","ethereum","console","log","request","method","error","web3","currentProvider","process","env","production","providers","HttpProvider","on","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/her73/Downloads/Project/CLIENT/src/context/index.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nconst metmaskContext = createContext();\n\nexport const MetmaskContextProvider = ({ children }) => {\n  const [accounts, setAccounts] = useState(\"\");\n  \n\n  const connectAccount = async () => {\n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n      try {\n        console.log(\"Ethereum successfully detected!\");\n        await provider.request({ method: \"eth_requestAccounts\" });\n        const accounts = await provider.request({ method: \"eth_accounts\" });\n        console.log(\"Connected account:\", accounts[0]);\n      } catch {\n        console.error(\"User is not allowed\");\n      }\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else if (!process.env.production) {\n      provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\n    }\n    console.log(\"provider\", provider);\n\n    if (provider) {\n      const accounts = await provider.request({ method: \"eth_accounts\" });\n      setAccounts(accounts[0]);\n    }\n    return provider;\n  };\n\n  useEffect(() => {\n    if (window.ethereum) {\n      connectAccount();\n    }\n    // eslint-disable-next-line\n  }, [window.ethereum]);\n  window.ethereum.on(\"accountsChanged\", (accounts) => {\n    setAccounts(accounts[0] ? accounts[0] : \"\");\n  });\n\n  return (\n    <metmaskContext.Provider value={{ connectAccount, accounts }}>\n      {children}\n    </metmaskContext.Provider>\n  );\n};\n\nexport default metmaskContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxB,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAEtC,OAAO,MAAMO,sBAAsB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAG5C,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIC,QAAQ;IACZ,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnBF,QAAQ,GAAGC,MAAM,CAACC,QAAQ;MAC1B,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,MAAMJ,QAAQ,CAACK,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACzD,MAAMT,QAAQ,GAAG,MAAMG,QAAQ,CAACK,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAe,CAAC,CAAC;QACnEH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEP,QAAQ,CAAC,CAAC,CAAC,CAAC;MAChD,CAAC,CAAC,MAAM;QACNM,OAAO,CAACI,KAAK,CAAC,qBAAqB,CAAC;MACtC;IACF,CAAC,MAAM,IAAIN,MAAM,CAACO,IAAI,EAAE;MACtBR,QAAQ,GAAGC,MAAM,CAACO,IAAI,CAACC,eAAe;IACxC,CAAC,MAAM,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAClCZ,QAAQ,GAAG,IAAIV,IAAI,CAACuB,SAAS,CAACC,YAAY,CAAC,uBAAuB,CAAC;IACrE;IACAX,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IAEjC,IAAIA,QAAQ,EAAE;MACZ,MAAMH,QAAQ,GAAG,MAAMG,QAAQ,CAACK,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAe,CAAC,CAAC;MACnER,WAAW,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1B;IACA,OAAOG,QAAQ;EACjB,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,CAACC,QAAQ,EAAE;MACnBH,cAAc,CAAC,CAAC;IAClB;IACA;EACF,CAAC,EAAE,CAACE,MAAM,CAACC,QAAQ,CAAC,CAAC;EACrBD,MAAM,CAACC,QAAQ,CAACa,EAAE,CAAC,iBAAiB,EAAGlB,QAAQ,IAAK;IAClDC,WAAW,CAACD,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;EAC7C,CAAC,CAAC;EAEF,oBACEL,OAAA,CAACC,cAAc,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,cAAc;MAAEF;IAAS,CAAE;IAAAF,QAAA,EAC1DA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACzB,EAAA,CA7CWF,sBAAsB;AAAA4B,EAAA,GAAtB5B,sBAAsB;AA+CnC,eAAeD,cAAc;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}