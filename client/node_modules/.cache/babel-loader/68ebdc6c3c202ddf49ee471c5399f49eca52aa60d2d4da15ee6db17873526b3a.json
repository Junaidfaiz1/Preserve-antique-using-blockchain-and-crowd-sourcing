{"ast":null,"code":"// Import Web3\nimport Web3 from \"web3\";\n// Import Contract Artifacts\nimport UserManagementArtifact from \"../Contracts/UserManagement.json\";\nimport AntiqueDegitizeArtifact from \"../Contracts/AntiqueDegitize.json\";\nimport CrowdCampaign from \"../Contracts/CrowdCampaign.json\";\n\n// const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\"); // Use the default provider or a local one\nconst web3 = new Web3(window.ethereum);\nconst accounts = await web3.eth.getAccounts(); // Get a list of accounts on the network\n\n// Configuration object\nconst config = {\n  web3Provider: \"http://127.0.0.1:7545\",\n  userManagementContractAddress: \"0xb30e5a0Dd42D1Aed4C569D7A92Ae312002e1D50F\",\n  antiqueDegitizeContractAddress: \"0xe830CBB2c0799dF7cBA3DD2656Ea2a14B0B6f050\",\n  crowdCompaignContractAddress: \"0x498EEFf1A1fd41289f30Aaa89517A96Cc3d72d53\"\n};\n\n// Initialize contract instances\nconst userManagementContract = new web3.eth.Contract(UserManagementArtifact.abi, config.userManagementContractAddress);\nconst CrowdCampaignContract = new web3.eth.Contract(CrowdCampaign.abi, config.crowdCompaignContractAddress);\nconst antiqueDegitizeContract = new web3.eth.Contract(AntiqueDegitizeArtifact.abi, config.antiqueDegitizeContractAddress);\n\n// Function to connect wallet\nexport const connectWallet = async () => {\n  let provider;\n  if (window.ethereum) {\n    provider = window.ethereum;\n    try {\n      console.log(\"Ethereum successfully detected!\");\n      await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_accounts\"\n      });\n      console.log(\"Connected account:\", accounts[0]);\n    } catch {\n      console.error(\"User is not allowed\");\n    }\n  } else if (window.web3) {\n    provider = window.web3.currentProvider;\n  } else if (!process.env.production) {\n    provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\n  }\n  console.log(\"provider\", provider);\n  return provider;\n};\n\n// User Management Contract Interactions\nexport async function registerUser(userName, email, phoneNumber, password) {\n  try {\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const userAddress = accounts[0];\n\n    // Disconnect current account\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n      params: [{\n        eth_accounts: []\n      }]\n    });\n\n    // Request new account selection\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const gasEstimate = await userManagementContract.methods.registerUser(userName, email, phoneNumber, password).estimateGas({\n      from: userAddress\n    });\n    await userManagementContract.methods.registerUser(userName, email, phoneNumber, password).send({\n      from: userAddress,\n      gas: gasEstimate\n    });\n  } catch (error) {\n    console.error(\"Error registering user:\", error);\n    throw error;\n  }\n}\nexport async function loginUser(email, password) {\n  return userManagementContract.methods.login(email, password).call({\n    from: accounts[0]\n  });\n}\n\n// Antique Degitize Contract Interactions\nexport async function uploadAntique({\n  antiqueName,\n  category,\n  description,\n  imageName\n}) {\n  try {\n    const contract = new web3.eth.Contract(AntiqueDegitizeArtifact.abi, config.antiqueDegitizeContractAddress);\n    const accounts = await web3.eth.getAccounts();\n    const gasEstimate = await contract.methods.uploadAntique(antiqueName, category, description, imageName).estimateGas({\n      from: accounts[0]\n    });\n    await contract.methods.uploadAntique(antiqueName, category, description, imageName).send({\n      from: accounts[0],\n      gas: gasEstimate\n    });\n  } catch (error) {\n    console.error(\"Error uploading antique:\", error);\n    throw error;\n  }\n}\nexport async function updateAntique(id, name, category, description, imageName) {\n  try {\n    const contract = new web3.eth.Contract(AntiqueDegitizeArtifact.abi, config.antiqueDegitizeContractAddress);\n    const accounts = await web3.eth.getAccounts();\n    const gasEstimate = await contract.methods.updateAntique(id, name, category, description, imageName).estimateGas({\n      from: accounts[0]\n    });\n    await contract.methods.updateAntique(id, name, category, description, imageName).send({\n      from: accounts[0],\n      gas: gasEstimate\n    });\n  } catch (error) {\n    console.error(\"Error updating antique:\", error);\n    throw error;\n  }\n}\nexport async function removeAntique(antiqueId) {\n  const accounts = await web3.eth.getAccounts();\n  await antiqueDegitizeContract.methods.removeAntique(antiqueId).send({\n    from: accounts[0]\n  });\n}\nexport const getAntiques = async () => {\n  try {\n    return await antiqueDegitizeContract.methods.getAntiques().call().then(result => {\n      return result;\n    });\n  } catch (error) {\n    console.error(\"Error fetching total antiques:\", error);\n    throw error; // Re-throw the error to handle it appropriately in the component or wherever it's called\n  }\n};\n\nexport async function getAntiquesByCategory(category) {\n  return antiqueDegitizeContract.methods.getAntiquesByCategory(category).call();\n}\nexport const getAntiqueCategories = async () => {\n  const contract = new web3.eth.Contract(AntiqueDegitizeArtifact.abi, config.antiqueDegitizeContractAddress);\n  return await contract.methods.getAntiqueCategories().call().then(result => {\n    return result;\n  });\n};\nexport const getTotalAntiques = async () => {\n  try {\n    return await antiqueDegitizeContract.methods.getTotalAntiques().call().then(result => {\n      return result;\n    });\n  } catch (error) {\n    console.error(\"Error fetching total antiques:\", error);\n    throw error;\n  }\n};\nexport async function getAntiqueById(id) {\n  try {\n    const antique = await antiqueDegitizeContract.methods.getAntiqueById(id).call();\n    return antique; // Ensure that antique is returned directly without wrapping in an array\n  } catch (error) {\n    console.error(\"Error fetching antique by ID:\", error);\n    throw error;\n  }\n}\nexport async function searchAntique(searchTerm) {\n  try {\n    return await antiqueDegitizeContract.methods.searchAntique(searchTerm).call().then(result => {\n      return result;\n    });\n  } catch (error) {\n    console.error(\"Error searching for antique:\", error);\n    throw error;\n  }\n}\n\n// for search function\n// const searchTerm = \"vase\"; // or any other search term\n// const matchingAntiques = await searchAntique(searchTerm);\n// console.log(\"Matching antiques:\", matchingAntiques);\n\n// User Management Contract Interactions\n\nexport async function getUserByEmail(email) {\n  try {\n    return await userManagementContract.methods.getUserByEmail(email).call({\n      from: accounts[0]\n    });\n  } catch (error) {\n    console.error(\"Error fetching user by email:\", error);\n    throw error;\n  }\n}\n\n// Interaction file\n\nexport async function getUserById(userId) {\n  try {\n    return await userManagementContract.methods.getUserById(userId).call({\n      from: accounts[0]\n    });\n  } catch (error) {\n    console.error(\"Error fetching user by ID:\", error);\n    throw error;\n  }\n}\nexport async function viewAllUsers() {\n  try {\n    return await userManagementContract.methods.viewAllUsers().call({\n      from: accounts[0]\n    });\n  } catch (error) {\n    console.error(\"Error fetching all users:\", error);\n    throw error;\n  }\n}\nexport async function addCampaign(campaignDetails) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const gasEstimate = await CrowdCampaignContract.methods.addCampaign(campaignDetails.campaignName, campaignDetails.imageName, campaignDetails.videoName, campaignDetails.startDate, campaignDetails.startTime, campaignDetails.endDate, campaignDetails.endTime).estimateGas({\n      from: accounts[0]\n    });\n    await CrowdCampaignContract.methods.addCampaign(campaignDetails.campaignName, campaignDetails.imageName, campaignDetails.videoName, campaignDetails.startDate, campaignDetails.startTime, campaignDetails.endDate, campaignDetails.endTime).send({\n      from: accounts[0],\n      gas: gasEstimate\n    });\n  } catch (error) {\n    console.error(\"Error adding campaign:\", error);\n    throw error;\n  }\n}\nexport async function removeCampaign(campaignId) {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    const gasEstimate = await CrowdCampaignContract.methods.removeCampaign(campaignId).estimateGas({\n      from: accounts[0]\n    });\n    await CrowdCampaignContract.methods.removeCampaign(campaignId).send({\n      from: accounts[0],\n      gas: gasEstimate\n    });\n  } catch (error) {\n    console.error(\"Error removing campaign:\", error);\n    throw error;\n  }\n}\nexport async function viewAllCampaigns() {\n  try {\n    const totalCampaigns = await CrowdCampaignContract.methods.totalCampaigns().call({\n      from: accounts[0]\n    });\n    const campaignList = [];\n    for (let i = 0; i < totalCampaigns; i++) {\n      const campaignId = i;\n      const campaign = await CrowdCampaignContract.methods.getCampaignById(i).call({\n        from: accounts[0]\n      });\n      campaignList.push({\n        campaignId,\n        campaign\n      });\n    }\n    return campaignList;\n  } catch (error) {\n    console.error(\"Error fetching campaigns:\", error);\n    throw error;\n  }\n}\nexport async function getCampaignById(campaignId) {\n  return CrowdCampaignContract.methods.getCampaignById(campaignId).call({\n    from: accounts[0]\n  });\n}\nexport async function getVideoNameIfCampaignStarted(campaignId) {\n  try {\n    const currentTime = Math.floor(Date.now() / 1000);\n    const campaign = await getCampaignById(campaignId);\n    if (currentTime < campaign.startDate + campaign.startTime) {\n      throw new Error(\"Campaign has not started yet.\");\n    }\n    if (currentTime > campaign.endDate + campaign.endTime) {\n      throw new Error(\"Campaign has ended.\");\n    }\n    return campaign.videoName;\n  } catch (error) {\n    console.error(\"Error fetching video name for campaign:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["Web3","UserManagementArtifact","AntiqueDegitizeArtifact","CrowdCampaign","web3","window","ethereum","accounts","eth","getAccounts","config","web3Provider","userManagementContractAddress","antiqueDegitizeContractAddress","crowdCompaignContractAddress","userManagementContract","Contract","abi","CrowdCampaignContract","antiqueDegitizeContract","connectWallet","provider","console","log","request","method","error","currentProvider","process","env","production","providers","HttpProvider","registerUser","userName","email","phoneNumber","password","userAddress","params","eth_accounts","gasEstimate","methods","estimateGas","from","send","gas","loginUser","login","call","uploadAntique","antiqueName","category","description","imageName","contract","updateAntique","id","name","removeAntique","antiqueId","getAntiques","then","result","getAntiquesByCategory","getAntiqueCategories","getTotalAntiques","getAntiqueById","antique","searchAntique","searchTerm","getUserByEmail","getUserById","userId","viewAllUsers","addCampaign","campaignDetails","campaignName","videoName","startDate","startTime","endDate","endTime","removeCampaign","campaignId","viewAllCampaigns","totalCampaigns","campaignList","i","campaign","getCampaignById","push","getVideoNameIfCampaignStarted","currentTime","Math","floor","Date","now","Error"],"sources":["C:/Users/her73/Downloads/Project/CLIENT/src/utilities/interact.js"],"sourcesContent":["// Import Web3\r\nimport Web3 from \"web3\";\r\n// Import Contract Artifacts\r\nimport UserManagementArtifact from \"../Contracts/UserManagement.json\";\r\nimport AntiqueDegitizeArtifact from \"../Contracts/AntiqueDegitize.json\";\r\nimport CrowdCampaign from \"../Contracts/CrowdCampaign.json\";\r\n\r\n// const web3 = new Web3(Web3.givenProvider || \"http://localhost:7545\"); // Use the default provider or a local one\r\nconst web3 = new Web3(window.ethereum);\r\nconst accounts = await web3.eth.getAccounts(); // Get a list of accounts on the network\r\n\r\n// Configuration object\r\nconst config = {\r\n  web3Provider: \"http://127.0.0.1:7545\",\r\n  userManagementContractAddress: \"0xb30e5a0Dd42D1Aed4C569D7A92Ae312002e1D50F\",\r\n  antiqueDegitizeContractAddress: \"0xe830CBB2c0799dF7cBA3DD2656Ea2a14B0B6f050\",\r\n  crowdCompaignContractAddress: \"0x498EEFf1A1fd41289f30Aaa89517A96Cc3d72d53\",\r\n};\r\n\r\n// Initialize contract instances\r\nconst userManagementContract = new web3.eth.Contract(\r\n  UserManagementArtifact.abi,\r\n  config.userManagementContractAddress\r\n);\r\n\r\nconst CrowdCampaignContract = new web3.eth.Contract(\r\n  CrowdCampaign.abi,\r\n  config.crowdCompaignContractAddress\r\n);\r\n\r\nconst antiqueDegitizeContract = new web3.eth.Contract(\r\n  AntiqueDegitizeArtifact.abi,\r\n  config.antiqueDegitizeContractAddress\r\n);\r\n\r\n// Function to connect wallet\r\nexport const connectWallet = async () => {\r\n  let provider;\r\n\r\n  if (window.ethereum) {\r\n    provider = window.ethereum;\r\n    try {\r\n      console.log(\"Ethereum successfully detected!\");\r\n      await provider.request({ method: \"eth_requestAccounts\" });\r\n      const accounts = await provider.request({ method: \"eth_accounts\" });\r\n      console.log(\"Connected account:\", accounts[0]);\r\n    } catch {\r\n      console.error(\"User is not allowed\");\r\n    }\r\n  } else if (window.web3) {\r\n    provider = window.web3.currentProvider;\r\n  } else if (!process.env.production) {\r\n    provider = new Web3.providers.HttpProvider(\"http://localhost:7545\");\r\n  }\r\n  console.log(\"provider\", provider);\r\n\r\n  return provider;\r\n};\r\n\r\n// User Management Contract Interactions\r\nexport async function registerUser(userName, email, phoneNumber, password) {\r\n  try {\r\n    const accounts = await window.ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n    });\r\n    const userAddress = accounts[0];\r\n\r\n    // Disconnect current account\r\n    await window.ethereum.request({\r\n      method: \"eth_requestAccounts\",\r\n      params: [{ eth_accounts: [] }],\r\n    });\r\n\r\n    // Request new account selection\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n    const gasEstimate = await userManagementContract.methods\r\n      .registerUser(userName, email, phoneNumber, password)\r\n      .estimateGas({ from: userAddress });\r\n\r\n    await userManagementContract.methods\r\n      .registerUser(userName, email, phoneNumber, password)\r\n      .send({ from: userAddress, gas: gasEstimate });\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  return userManagementContract.methods\r\n    .login(email, password)\r\n    .call({ from: accounts[0] });\r\n}\r\n\r\n// Antique Degitize Contract Interactions\r\nexport async function uploadAntique({\r\n  antiqueName,\r\n  category,\r\n  description,\r\n  imageName,\r\n}) {\r\n  try {\r\n    const contract = new web3.eth.Contract(\r\n      AntiqueDegitizeArtifact.abi,\r\n      config.antiqueDegitizeContractAddress\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n    const gasEstimate = await contract.methods\r\n      .uploadAntique(antiqueName, category, description, imageName)\r\n      .estimateGas({ from: accounts[0] });\r\n\r\n    await contract.methods\r\n      .uploadAntique(antiqueName, category, description, imageName)\r\n      .send({ from: accounts[0], gas: gasEstimate });\r\n  } catch (error) {\r\n    console.error(\"Error uploading antique:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function updateAntique(\r\n  id,\r\n  name,\r\n  category,\r\n  description,\r\n  imageName\r\n) {\r\n  try {\r\n    const contract = new web3.eth.Contract(\r\n      AntiqueDegitizeArtifact.abi,\r\n      config.antiqueDegitizeContractAddress\r\n    );\r\n    const accounts = await web3.eth.getAccounts();\r\n    const gasEstimate = await contract.methods\r\n      .updateAntique(id, name, category, description, imageName)\r\n      .estimateGas({ from: accounts[0] });\r\n\r\n    await contract.methods\r\n      .updateAntique(id, name, category, description, imageName)\r\n      .send({ from: accounts[0], gas: gasEstimate });\r\n  } catch (error) {\r\n    console.error(\"Error updating antique:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function removeAntique(antiqueId) {\r\n  const accounts = await web3.eth.getAccounts();\r\n  await antiqueDegitizeContract.methods\r\n    .removeAntique(antiqueId)\r\n    .send({ from: accounts[0] });\r\n}\r\n\r\nexport const getAntiques = async () => {\r\n  try {\r\n    return await antiqueDegitizeContract.methods\r\n      .getAntiques()\r\n      .call()\r\n      .then((result) => {\r\n        return result;\r\n      });\r\n  } catch (error) {\r\n    console.error(\"Error fetching total antiques:\", error);\r\n    throw error; // Re-throw the error to handle it appropriately in the component or wherever it's called\r\n  }\r\n};\r\n\r\nexport async function getAntiquesByCategory(category) {\r\n  return antiqueDegitizeContract.methods.getAntiquesByCategory(category).call();\r\n}\r\n\r\nexport const getAntiqueCategories = async () => {\r\n  const contract = new web3.eth.Contract(\r\n    AntiqueDegitizeArtifact.abi,\r\n    config.antiqueDegitizeContractAddress\r\n  );\r\n  return await contract.methods\r\n    .getAntiqueCategories()\r\n    .call()\r\n    .then((result) => {\r\n      return result;\r\n    });\r\n};\r\n\r\nexport const getTotalAntiques = async () => {\r\n  try {\r\n    return await antiqueDegitizeContract.methods\r\n      .getTotalAntiques()\r\n      .call()\r\n      .then((result) => {\r\n        return result;\r\n      });\r\n  } catch (error) {\r\n    console.error(\"Error fetching total antiques:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport async function getAntiqueById(id) {\r\n  try {\r\n    const antique = await antiqueDegitizeContract.methods\r\n      .getAntiqueById(id)\r\n      .call();\r\n    return antique; // Ensure that antique is returned directly without wrapping in an array\r\n  } catch (error) {\r\n    console.error(\"Error fetching antique by ID:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function searchAntique(searchTerm) {\r\n  try {\r\n    return await antiqueDegitizeContract.methods\r\n      .searchAntique(searchTerm)\r\n      .call()\r\n      .then((result) => {\r\n        return result;\r\n      });\r\n  } catch (error) {\r\n    console.error(\"Error searching for antique:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// for search function\r\n// const searchTerm = \"vase\"; // or any other search term\r\n// const matchingAntiques = await searchAntique(searchTerm);\r\n// console.log(\"Matching antiques:\", matchingAntiques);\r\n\r\n// User Management Contract Interactions\r\n\r\nexport async function getUserByEmail(email) {\r\n  try {\r\n    return await userManagementContract.methods\r\n      .getUserByEmail(email)\r\n      .call({ from: accounts[0] });\r\n  } catch (error) {\r\n    console.error(\"Error fetching user by email:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Interaction file\r\n\r\nexport async function getUserById(userId) {\r\n  try {\r\n    return await userManagementContract.methods\r\n      .getUserById(userId)\r\n      .call({ from: accounts[0] });\r\n  } catch (error) {\r\n    console.error(\"Error fetching user by ID:\", error);\r\n    throw error;\r\n  }\r\n}\r\nexport async function viewAllUsers() {\r\n  try {\r\n    return await userManagementContract.methods\r\n      .viewAllUsers()\r\n      .call({ from: accounts[0] });\r\n  } catch (error) {\r\n    console.error(\"Error fetching all users:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function addCampaign(campaignDetails) {\r\n  try {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const gasEstimate = await CrowdCampaignContract.methods\r\n      .addCampaign(\r\n        campaignDetails.campaignName,\r\n        campaignDetails.imageName,\r\n        campaignDetails.videoName,\r\n        campaignDetails.startDate,\r\n        campaignDetails.startTime,\r\n        campaignDetails.endDate,\r\n        campaignDetails.endTime\r\n      )\r\n      .estimateGas({ from: accounts[0] });\r\n\r\n    await CrowdCampaignContract.methods\r\n      .addCampaign(\r\n        campaignDetails.campaignName,\r\n        campaignDetails.imageName,\r\n        campaignDetails.videoName,\r\n        campaignDetails.startDate,\r\n        campaignDetails.startTime,\r\n        campaignDetails.endDate,\r\n        campaignDetails.endTime\r\n      )\r\n      .send({ from: accounts[0], gas: gasEstimate });\r\n  } catch (error) {\r\n    console.error(\"Error adding campaign:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function removeCampaign(campaignId) {\r\n  try {\r\n    const accounts = await web3.eth.getAccounts();\r\n    const gasEstimate = await CrowdCampaignContract.methods\r\n      .removeCampaign(campaignId)\r\n      .estimateGas({ from: accounts[0] });\r\n\r\n    await CrowdCampaignContract.methods\r\n      .removeCampaign(campaignId)\r\n      .send({ from: accounts[0], gas: gasEstimate });\r\n  } catch (error) {\r\n    console.error(\"Error removing campaign:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function viewAllCampaigns() {\r\n  try {\r\n    const totalCampaigns = await CrowdCampaignContract.methods\r\n      .totalCampaigns()\r\n      .call({ from: accounts[0] });\r\n\r\n    const campaignList = [];\r\n\r\n    for (let i = 0; i < totalCampaigns; i++) {\r\n      const campaignId = i;\r\n      const campaign = await CrowdCampaignContract.methods\r\n        .getCampaignById(i)\r\n        .call({ from: accounts[0] });\r\n\r\n      campaignList.push({ campaignId, campaign });\r\n    }\r\n\r\n    return campaignList;\r\n  } catch (error) {\r\n    console.error(\"Error fetching campaigns:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getCampaignById(campaignId) {\r\n  return CrowdCampaignContract.methods\r\n    .getCampaignById(campaignId)\r\n    .call({ from: accounts[0] });\r\n}\r\n\r\nexport async function getVideoNameIfCampaignStarted(campaignId) {\r\n  try {\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n    const campaign = await getCampaignById(campaignId);\r\n\r\n    if (currentTime < campaign.startDate + campaign.startTime) {\r\n      throw new Error(\"Campaign has not started yet.\");\r\n    }\r\n\r\n    if (currentTime > campaign.endDate + campaign.endTime) {\r\n      throw new Error(\"Campaign has ended.\");\r\n    }\r\n\r\n    return campaign.videoName;\r\n  } catch (error) {\r\n    console.error(\"Error fetching video name for campaign:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}